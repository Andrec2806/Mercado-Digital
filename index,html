import React, { useEffect, useState } from 'react';

// MercadoVeci - Single-file React prototype
// Tech: React + Tailwind CSS (mobile-first)
// Notes: Saves data to localStorage, simulates SMS/WhatsApp share via deep links.
// Default export component for preview. Designed to be self-contained.

export default function MercadoVeciApp() {
  const [products, setProducts] = useState([]);
  const [query, setQuery] = useState('');
  const [showAdd, setShowAdd] = useState(false);
  const [form, setForm] = useState({ title: '', price: '', stock: '', seller: '', phone: '', notes: '' });
  const [filter, setFilter] = useState('all');
  const [isSellerMode, setIsSellerMode] = useState(false);

  // Load products from localStorage on mount
  useEffect(() => {
    const raw = localStorage.getItem('mercadoveci_products');
    if (raw) setProducts(JSON.parse(raw));
  }, []);

  // Persist
  useEffect(() => {
    localStorage.setItem('mercadoveci_products', JSON.stringify(products));
  }, [products]);

  function resetForm() {
    setForm({ title: '', price: '', stock: '', seller: '', phone: '', notes: '' });
  }

  function addProduct(e) {
    e.preventDefault();
    const newProduct = {
      id: Date.now().toString(),
      title: form.title || 'Sin título',
      price: parseFloat(form.price || '0'),
      stock: parseInt(form.stock || '1'),
      seller: form.seller || 'Vecino',
      phone: form.phone || '',
      notes: form.notes || '',
      createdAt: new Date().toISOString(),
    };
    setProducts([newProduct, ...products]);
    resetForm();
    setShowAdd(false);
  }

  function removeProduct(id) {
    if (!confirm('¿Eliminar producto?')) return;
    setProducts(products.filter(p => p.id !== id));
  }

  function contactWhatsApp(product) {
    const text = `Hola! Estoy interesado en: ${product.title} - Precio: $${product.price}. Vendedor: ${product.seller}. ${product.notes}`;
    const phone = product.phone.replace(/[^0-9+]/g, '');
    const url = phone ? `https://wa.me/${phone}?text=${encodeURIComponent(text)}` : `https://wa.me/?text=${encodeURIComponent(text)}`;
    window.open(url, '_blank');
  }

  function contactSMS(product) {
    const text = `Hola! Interesado en: ${product.title} - $${product.price}. Vendedor: ${product.seller}.`;
    const phone = product.phone.replace(/[^0-9+]/g, '');
    // sms: scheme works on mobile devices; on desktop it may not open
    const url = phone ? `sms:${phone}?body=${encodeURIComponent(text)}` : `sms:?body=${encodeURIComponent(text)}`;
    window.location.href = url;
  }

  const filtered = products.filter(p => {
    if (filter === 'with-phone') return p.phone && p.phone.trim() !== '';
    if (filter === 'no-phone') return !p.phone || p.phone.trim() === '';
    if (query && query.trim() !== '') {
      const q = query.toLowerCase();
      return (p.title + ' ' + p.seller + ' ' + p.notes).toLowerCase().includes(q);
    }
    return true;
  });

  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-8">
      <header className="max-w-4xl mx-auto flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="w-12 h-12 rounded-lg bg-emerald-400 flex items-center justify-center text-white font-bold">MV</div>
          <div>
            <h1 className="text-xl md:text-2xl font-extrabold">MercadoVeci</h1>
            <p className="text-sm text-gray-600">Comercio y trueque local por WhatsApp/SMS</p>
          </div>
        </div>

        <div className="flex items-center space-x-2">
          <button
            className={`px-3 py-2 rounded-md border ${isSellerMode ? 'bg-white' : 'bg-emerald-500 text-white'} text-sm`}
            onClick={() => setIsSellerMode(!isSellerMode)}
          >
            {isSellerMode ? 'Modo Cliente' : 'Modo Vendedor'}
          </button>

          <button
            className="px-3 py-2 rounded-md bg-white border text-sm"
            onClick={() => { setShowAdd(true); setIsSellerMode(true); }}
          >
            + Publicar
          </button>
        </div>
      </header>

      <main className="max-w-4xl mx-auto mt-6">
        {/* Search and filters */}
        <section className="bg-white p-4 rounded-lg shadow-sm">
          <div className="flex flex-col md:flex-row md:items-center md:space-x-4">
            <input
              placeholder="Buscar producto, vendedor o nota..."
              value={query}
              onChange={e => setQuery(e.target.value)}
              className="flex-1 border rounded-md px-3 py-2 focus:outline-none"
            />

            <select className="mt-2 md:mt-0 border rounded-md px-3 py-2" value={filter} onChange={e => setFilter(e.target.value)}>
              <option value="all">Todos</option>
              <option value="with-phone">Con teléfono</option>
              <option value="no-phone">Sin teléfono</option>
            </select>

            <div className="mt-2 md:mt-0 text-sm text-gray-600">Resultados: <strong>{filtered.length}</strong></div>
          </div>
        </section>

        {/* Products grid */}
        <section className="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4">
          {filtered.length === 0 && (
            <div className="col-span-full bg-white p-6 rounded-lg shadow-sm text-center text-gray-600">
              No hay productos publicados. Sé el primero en publicar o invita a tus vecinos.
            </div>
          )}

          {filtered.map(product => (
            <article key={product.id} className="bg-white rounded-lg shadow-sm p-4 flex flex-col">
              <div className="flex items-start justify-between">
                <div>
                  <h3 className="font-bold text-lg">{product.title}</h3>
                  <p className="text-sm text-gray-600">Vendedor: {product.seller}</p>
                </div>
                <div className="text-right">
                  <div className="text-2xl font-extrabold">${product.price}</div>
                  <div className="text-sm text-gray-500">Stock: {product.stock}</div>
                </div>
              </div>

              {product.notes && <p className="mt-3 text-sm text-gray-700">{product.notes}</p>}

              <div className="mt-4 flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => contactWhatsApp(product)}
                    className="px-3 py-2 rounded-md bg-green-600 text-white text-sm"
                  >
                    WhatsApp
                  </button>

                  <button
                    onClick={() => contactSMS(product)}
                    className="px-3 py-2 rounded-md border text-sm"
                  >
                    SMS
                  </button>

                  <button
                    onClick={() => navigator.clipboard?.writeText(`${product.title} — $${product.price} — ${product.seller} ${product.phone ? ' — ' + product.phone : ''}`)}
                    className="px-3 py-2 rounded-md border text-sm"
                  >
                    Copiar
                  </button>
                </div>

                <div className="text-xs text-gray-400">Publicado: {new Date(product.createdAt).toLocaleString()}</div>
              </div>

              {isSellerMode && (
                <div className="mt-3 flex justify-end">
                  <button onClick={() => removeProduct(product.id)} className="text-red-600 text-sm">Eliminar</button>
                </div>
              )}
            </article>
          ))}
        </section>

        {/* Quick onboarding panel */}
        <section className="mt-8 bg-white p-4 rounded-lg shadow-sm">
          <h2 className="font-bold text-lg">Cómo usar MercadoVeci</h2>
          <ol className="mt-2 list-decimal list-inside text-sm text-gray-700 space-y-1">
            <li>Publica tu producto con el botón <strong>+ Publicar</strong>.</li>
            <li>Comparte el enlace de WhatsApp o envía un SMS al vendedor para coordinar la compra.</li>
            <li>Usa el filtro para ver anuncios con o sin teléfono.</li>
            <li>Organiza una feria o punto de entrega en tu barrio para facilitar intercambio.</li>
          </ol>
        </section>

        {/* Footer */}
        <footer className="mt-8 text-center text-gray-500 text-sm">
          Diseño prototipo • MercadoVeci — Hecho para comunidades locales • Datos guardados en tu navegador
        </footer>
      </main>

      {/* Add Product Modal */}
      {showAdd && (
        <div className="fixed inset-0 bg-black/40 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg w-full max-w-xl p-6">
            <div className="flex items-center justify-between">
              <h3 className="font-bold text-lg">Publicar producto</h3>
              <button onClick={() => setShowAdd(false)} className="text-gray-500">Cerrar</button>
            </div>

            <form className="mt-4 space-y-3" onSubmit={addProduct}>
              <div>
                <label className="text-sm">Título</label>
                <input className="w-full border rounded-md px-3 py-2" value={form.title} onChange={e => setForm({...form, title: e.target.value})} />
              </div>

              <div className="grid grid-cols-2 gap-3">
                <div>
                  <label className="text-sm">Precio (USD)</label>
                  <input type="number" step="0.01" className="w-full border rounded-md px-3 py-2" value={form.price} onChange={e => setForm({...form, price: e.target.value})} />
                </div>
                <div>
                  <label className="text-sm">Stock</label>
                  <input type="number" className="w-full border rounded-md px-3 py-2" value={form.stock} onChange={e => setForm({...form, stock: e.target.value})} />
                </div>
              </div>

              <div>
                <label className="text-sm">Nombre del vendedor</label>
                <input className="w-full border rounded-md px-3 py-2" value={form.seller} onChange={e => setForm({...form, seller: e.target.value})} />
              </div>

              <div>
                <label className="text-sm">Teléfono (opcional, formato internacional o local)</label>
                <input className="w-full border rounded-md px-3 py-2" value={form.phone} onChange={e => setForm({...form, phone: e.target.value})} />
              </div>

              <div>
                <label className="text-sm">Notas (ej. horario de entrega)</label>
                <textarea className="w-full border rounded-md px-3 py-2" value={form.notes} onChange={e => setForm({...form, notes: e.target.value})} />
              </div>

              <div className="flex items-center justify-end space-x-2">
                <button type="button" onClick={() => { resetForm(); setShowAdd(false); }} className="px-4 py-2 border rounded-md">Cancelar</button>
                <button type="submit" className="px-4 py-2 bg-emerald-500 text-white rounded-md">Publicar</button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}
